name: 'C++ CI' 
# имя рабочего процесса
on:
  push:
    branches:
      - master
      - feature/github_actions
# ветка lab1 будет запущен при push
jobs:
# задачи рабочего процесса 
  create_release: 
    name: Create release
    runs-on: ubuntu-latest # определяет тип контейнера для выполнения задачи.
    outputs: # определяет выходные параметры задачи.
      upload_url: ${{ steps.create_release.outputs.upload_url }} # ссылается входной параметр шага Create release
    permissions: write-all # определяет разрешения для задачи. разрешение, которое предоставляет задаче полный доступ на запись к репозиторию и его содержимому
    steps:
      - name: Create release
        id: create_release # присваивает уникальный идентификатор шагу
        uses: actions/create-release@v1
        env: # определяет переменные окружения.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # это имя переменной окружения 
        with: # определяет параметры для действия.
          tag_name: ${{ github.run_number}} # указывает тег для создаваемого релиза
          release_name: Release ${{ github.run_number }} # указывает имя для создаваемого релиза
          draft: false # указывает, является ли релиз черновиком
          prerelease: false # указывает, является ли релиз предварительным

  release_assets_ubuntu:
    name: Release assets
    needs: create_release # Определяет зависимости задачи.
    runs-on: ubuntu-latest 
    permissions: write-all
    steps:
      - name: Checkout code # используется для описания действия
        uses: actions/checkout@v4 #  используется для клонирования репозитория.
        with:        
          submodules: true

      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      # Обновляет пакеты и устанавливает библиотеку Boost для тестирования.
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} 

      - run: cmake --build .

      - run: cmake --build . --target test

      - run: cmake --build . --target package

      - name: Upload release assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url}}
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.zip
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.zip
          asset_content_type: application/vnd.debian.binary-package

  release_assets_macos:
    name: Release assets
    needs: create_release
    runs-on: macos-latest
    permissions: write-all 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - run: brew install boost
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Upload release assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url}}
          asset_name: helloworld-0.0.${{ github.run_number }}-Darwin.zip
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Darwin.zip
          asset_content_type: application/zip